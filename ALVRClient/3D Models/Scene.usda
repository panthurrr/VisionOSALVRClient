#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Floor", "SphereGroup1", "SphereGroup1_1", "SphereGroup1_2", "SphereGroup1_3", "Material"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Xform "SphereGroup1" (
        active = true
    )
    {
        reorder nameChildren = ["S1", "S2", "Material"]
        def Sphere "S1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1/S1/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, -3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                prepend token outputs:surface.connect = </Root/SphereGroup1/S1/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.14913142, 0) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }

        def Sphere "S2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1/S2/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, 3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SphereGroup1/S2/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0.97680455, 0) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }
    }

    def Xform "SphereGroup1_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.78539807, 0)
        }
    )
    {
        reorder nameChildren = ["S3", "S4", "Material"]
        quatf xformOp:orient = (0.92387956, 0, 0.3826834, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "S3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_1/S3/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, -3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                prepend token outputs:surface.connect = </Root/SphereGroup1_1/S3/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.57919407, 0.12801445, 0.57268614) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }

        def Sphere "S4" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_1/S4/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, 3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SphereGroup1_1/S4/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0, 0.9914394, 1) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }
    }

    def Xform "SphereGroup1_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        reorder nameChildren = ["S5", "S6", "Material"]
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "S5" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_2/S5/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, -3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                prepend token outputs:surface.connect = </Root/SphereGroup1_2/S5/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.5763723, 0) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }

        def Sphere "S6" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_2/S6/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, 3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SphereGroup1_2/S6/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.6679979, 0.47512126, 0.2586011) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }
    }

    def Xform "SphereGroup1_3" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 2.3561945, 0)
        }
    )
    {
        reorder nameChildren = ["S7", "S8", "Material"]
        quatf xformOp:orient = (0.3826834, 0, 0.92387956, 0)
        float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "S7" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_3/S7/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, -3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SphereGroup1_3/S7/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 0.2527924, 1) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }

        def Sphere "S8" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Collider", "InputTarget", "Material"]
            rel material:binding = </Root/SphereGroup1_3/S8/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.05
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.1, 3.33)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.05
                    token shapeType = "Sphere"
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SphereGroup1_3/S8/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.016804177, 0.198351, 1) (
                        colorSpace = "srgb_texture"
                    )
                    token outputs:surface
                }
            }
        }
    }
}

